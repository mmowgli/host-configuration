## YAML Template.
---

# configures tomcat hosts. 
- hosts: [tomcats]
  sudo: true
  remote_user: vagrant
  
  vars:
      GAME_NAME: mmowgli
      JDK_URL: http://download.oracle.com/otn-pub/java/jdk/8u65-b17/jdk-8u65-linux-x64.tar.gz
      JDK_VERSION: jdk1.8.0_65
      TOMCAT_URL: http://apache.mesi.com.ar/tomcat/tomcat-7/v7.0.67/bin/apache-tomcat-7.0.67.tar.gz
      TOMCAT_VERSION: apache-tomcat-7.0.67
      JVM_ROUTE: "{{ ansible_hostname }}"
      JCE_URL: http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip
      AJP_PORT: 8009
      TOMCAT_UID: 501
      TOMCAT_GUID: 501
       # There are better ways to handle passwords in ansible
      SMB_USER: mmowgli
      SMB_USER_PASSWORD: mmowgli
      DB_SERVER_NAME: mmowgliServer.rci.montana.edu
      WAR_FILE_URL: http://movesinstitute.org/~mcgredo/mmwogli.war
      
      # Used as a key for encrypting PII in the database. The tomcat servers need
      # this to decrypt data
      DATABASE_ENCRYPTION_PASSWORD: mmowgli
      
      # Database user the tomcats connect as
      DATABASE_NAME: mmowgli
      DATABASE_USER_NAME: mmowgli
      DATABASE_PASSWORD: gwtservelet
      
      # Mail server
      MAIL_SERVER: mule.nps.edu
      
       
      
      
  tasks:
      
      - name: mysql client libraries
        yum: pkg={{ item }} state=installed enablerepo=remi
        with_items:
          - mysql
          - mysql-devel
          - mysql-libs
          - MySQL-python
            
      - name: smb credentials file
        template: src=templates/smb-credentials.txt.jn2 dest=/etc/smb-credentials.txt
      
      # Tomcat should have a consistent uid and gid across all hosts for the shared filesystem
      - name: create tomcat group
        group: state=present name=tomcat gid={{ TOMCAT_GUID }}
        
      - name: create tomcat user
        user: name=tomcat comment="Tomcat user" createhome=yes state=present group=tomcat shell=/bin/bash uid={{ TOMCAT_UID }} 
        
      - name: ensure .bashrc present
        copy: src=files/bashrc dest=/home/tomcat/.bashrc owner=tomcat group=tomcat
        
      - name: ensure .bash_profile present, has path for java
        copy: src=files/bash_profile dest=/home/tomcat/.bash_profile owner=tomcat group=tomcat
        
      - name: Directories for landing various java-related things
        file: path={{ item }} owner=root group=root mode=0755 state=directory
        with_items:
            - /usr/java
            - /usr/java/ant
            - /usr/java/tomcat
          
      - name: get jdk
        command: "wget --no-check-certificate --no-cookies --header 'Cookie: oraclelicense=accept-securebackup-cookie' {{ JDK_URL }} -O /tmp/jdk1.8.tar.gz"
        
      - name: install JDK
        unarchive: src=/tmp/jdk1.8.tar.gz dest=/usr/java copy=no
        
      - name: symlinks for jdk
        file: state=link src=/usr/java/{{ JDK_VERSION }} dest=/usr/java/default
        
      - name: symlinks for jdk
        file: state=link src=/usr/java/{{ JDK_VERSION }} dest=/usr/java/latest
      
      - name: get java cryptography extensions
        command: "wget --no-check-certificate --no-cookies --header 'Cookie: oraclelicense=accept-securebackup-cookie' {{ JCE_URL }} -O /tmp/jce.zip"
      
      - name: create dir to hold jce
        file: state=directory dest=/tmp/jce
        
      - name: unzip java cryptography extensions
        unarchive: copy=no src=/tmp/jce.zip dest=/tmp/jce
        
      - name: Copy jce jar files to destination
        command: cp /tmp/jce/UnlimitedJCEPolicyJDK8/local_policy.jar /usr/java/default/jre/lib/security/local_policy.jar
        
      - name: copy jce jar file to destination
        command: cp /tmp/jce/UnlimitedJCEPolicyJDK8/US_export_policy.jar /usr/java/default/jre/lib/security/US_export_policy.jar
        
      - name: set permissions on java directory
        file: path=/usr/java/{{ JDK_VERSION }} owner=root group=root state=directory recurse=yes
      - name: get tomcat
        command: wget --no-check-certificate {{ TOMCAT_URL }} -O /tmp/tomcat.tar.gz
        
      - name: unpack tomcat
        unarchive: src=/tmp/tomcat.tar.gz dest=/usr/java copy=no
        
      - name: tomcat server.xml file with jvmRoute
        template: src=templates/tomcat/server.xml.jn2 dest=/usr/java/{{ TOMCAT_VERSION }}/conf/server.xml
       
      - name: set permissions on tomcat
        file: path=/usr/java/{{ TOMCAT_VERSION }} state=directory recurse=yes owner=tomcat group=tomcat
      
      - name: install init script
        template: src=templates/tomcat/tomcat.jn2 dest=/etc/init.d/tomcat mode=755 owner=root group=root
        
      - name: make tomcat init.d script start on boot
        command: /sbin/chkconfig --add tomcat
        
      - name: start tomcat
        service: state=started name=tomcat
         
      - name: open tomcat AJP port through firewall
        lineinfile: dest=/etc/ferm/ferm.conf
              line='proto tcp dport ({{ AJP_PORT }}) ACCEPT;'
              insertafter='# Ansible specified rules.'
        notify: run ferm
        
      - name: mount point for smb
        file: path=/mmowgli/shared/images state=directory mode=0755
      
      - name: mount shared filesystem
        mount: name=/mmowgli/shared/images fstype=cifs src=//mmowgliServer/images state=mounted opts="rw,username={{ SMB_USER }},password={{ SMB_USER_PASSWORD }}"
      
      ## A series of excessively complex tasks to modify the contents of the
      ## war file to get to an OK state.
      - name: get a plausible war file in preparation for modifying it
        get_url: url={{WAR_FILE_URL}} dest=/tmp
      
      - name: working directory for fiddling with the war file
        file: path=/tmp/mmowgli state=directory 
        
      - name: copy war file to working directory
        copy: src=/tmp/mmowgli.war dest=/tmp/mmowgli/mmowgli.war
        
      - name: Unarchive war file in preparation for diddling with the contents
        unarchive: src=/tmp/mmowgli/mmowgli.war dest=/tmp/mmowgli
        
      - name: Delete mmowgli.war file 
        file: path=/tmp/mmowgli/mmowgli.war state=absent
        
      # Use templating to set the db encryption pw 
      - name: set database encryption password properties file
        template: src=/templates/databaseEncryptionPassword.properties.jn2 dest=/tmp/mmowgli/WEB-INF/classes/edu/nps/moves/mmowgli/databaseEncryptionPassword.properties
        
      - name: Template web.xml file
        template: src=/templates/web.xml.jn2 dest=/tmp/mmowgli/WEB_INF/web.xml
       
      - name: re-pack war file
        shell: cd /tmp/mmowgli; zip -r mmowgli.war .;
       
      - name: Stop tomcat
        service: name=tomcat state=stopped
        
      - name: remove any files in webapps dir
        shell: rm -rf /usr/java/{{TOMCAT_VERSION}}/webapps/*
        
      - name: copy war file to tomcat webapps directory
        shell: cp /temp/mmowgli/mmowgli.war /usr/java/{{TOMCAT_VERSION}}/webapps
       
      - name: Start tomcat
        service: name=tomcat state=started
      
      # Handlers run once and only once when notified by N tasks
  handlers:
      
    # see http://tjelvarolsson.com/blog/how-to-manage-firewalls-using-ferm-and-ansible/ for details on ferm
    - name: run ferm
      command: ferm /etc/ferm/ferm.conf
      notify: save iptables

    - name: save iptables
      command: service iptables save
